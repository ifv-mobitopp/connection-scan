apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

wrapper.gradleVersion = '5.2'
group = 'edu.kit.ifv.mobitopp'
version = '0.2-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12',
        'org.hamcrest:hamcrest-all:1.3',
        'com.github.npathai:hamcrest-optional:1.0',
        'org.mockito:mockito-core:2.+',
        'nl.jqno.equalsverifier:equalsverifier:2.2.+'
}

sourceSets {
    integrationTest {
        // Needed only for eclipse to update project settings
        java.srcDirs = ['src/integration-test/java']
        resources.srcDirs = ['src/integration-test/resource']
        
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

integrationTest.dependsOn test
check.dependsOn integrationTest

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version
        }
    }
    repositories {
        maven {
            credentials {
                username getPropertyOrDefault('repositoryUsername')
                password getPropertyOrDefault('repositoryPassword')
            }
            def repositoryUrl = getPropertyOrDefault('repositoryUrl')
            def releasesRepoUrl = "${repositoryUrl}/repository/maven-releases/"
            def snapshotsRepoUrl = "${repositoryUrl}/repository/maven-snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

def getPropertyOrDefault(key) {
    return project.hasProperty(key) ? project.property(key) : key
}